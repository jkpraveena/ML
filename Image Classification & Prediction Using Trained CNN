import numpy as np
import pickle
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import os

# Functions to load CIFAR-10 dataset
def load_cifar_batch(file_path):
    with open(file_path, 'rb') as f:
        data_dict = pickle.load(f, encoding='bytes')
        images = data_dict[b'data']
        labels = data_dict[b'labels']
        images = images.reshape((len(labels), 3, 32, 32))
        images = np.transpose(images, (0, 2, 3, 1))
        return images, np.array(labels)

def load_cifar10(data_dir):
    train_images, train_labels = [], []
    for i in range(1, 6):
        file_path = os.path.join(data_dir, f'data_batch_{i}')
        images, labels = load_cifar_batch(file_path)
        train_images.append(images)
        train_labels.append(labels)
    train_images = np.concatenate(train_images)
    train_labels = np.concatenate(train_labels)
    test_images, test_labels = load_cifar_batch(os.path.join(data_dir, 'test_batch'))
    return (train_images, train_labels), (test_images, test_labels)

# Load and preprocess data
data_dir = '/path_to_your/cifar-10-batches-py'
(train_images, train_labels), (test_images, test_labels) = load_cifar10(data_dir)
train_images = train_images / 255.0
test_images = test_images / 255.0

# Build CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10)
])

# Compile and train the model
model.compile(optimizer='adam', 
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), 
              metrics=['accuracy'])
history = model.fit(train_images, train_labels, epochs=10, 
                    validation_data=(test_images, test_labels))

# Evaluate model
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print(f'Test accuracy: {test_acc}')

# Plot accuracy results
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

# Save model
model.save('my_model.h5')


import numpy as np
import tensorflow as tf
from tensorflow.keras import models
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

# Load pre-trained model
model = models.load_model('my_model.h5')

# Function to preprocess image
def load_and_preprocess_image(img_path):
    img = image.load_img(img_path, target_size=(32, 32))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    return img_array

# Path to image and prediction
img_path = 'path_to_your_image.jpg'
img_array = load_and_preprocess_image(img_path)
predictions = model.predict(img_array)
predicted_class = np.argmax(predictions[0])

# CIFAR-10 class names
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
print(f'Predicted class: {class_names[predicted_class]}')

# Display image and prediction
plt.imshow(image.load_img(img_path))
plt.title(f'Prediction: {class_names[predicted_class]}')
plt.show()
